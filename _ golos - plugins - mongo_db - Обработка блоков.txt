== golos/plugins/mongo_db/mongo_db_plugin.cpp:

Выполнение плагина начинается в mongo_db_plugin::plugin_initialize(), который однократно инициализирует подключение к Монго через mongo_db_writer, а также навешивает обработчик на db.applied_block (где db - это golos chain database), так, что тот вызывает pimpl_->on_block(b); где pimpl_ это mongo_db_plugin_impl, b - signed_block.
Таким образом, каждый signed_block попадает в mongo_db_plugin_impl::on_block().

Затем, в процессе всей жизни плагина, mongo_db_plugin_impl::on_block() вызывает mongo_db_writer::on_block() для каждого прилетающего signed_blockа, так что дальнейшая обработка signed_blockа продолжается в mongo_db_writer.cpp.

== golos/plugins/mongo_db/mongo_db_writer.cpp: ПУТЬ БЛОКОВ. НАЧАЛО.

mongo_db_writer::on_block() получает именно каждый блок, а не серию блоков. Но он его добавляет в кеш - мапу blocks - и в очередной раз, когда сработает if с irreversible, то он обработает всю эту мапу блоков в цикле while. (И очистит ее, удалив каждый обрабатываемый блок с помощью erase).

Как происходит обработка каждого блока из кеша в цикле:

Там для каждого блока создается свой state_writer, в который передается ссылка на signed_block (ради поля timestamp) и, самое главное, на all_docs - единый boost::multi_index_container для всех блоков этой серии.

У каждого из блоков цикл проходит по всем транзакциям и по всем операциям, для каждой из операции вызывается конструкция вида op.visit(st_writer); которая приводит к вызову оператора соответствующей операции из state_writer (!) , расположенного в mongo_db_state.cpp (!)

== golos/plugins/mongo_db/mongo_db_state.cpp:

Именно state_writer (mongo_db_state.cpp) играет основную роль в обработке операций, формировании основных данных для записи в Монго. 

В нем должны быть объявлены операторы для всех операций, которые существуют в steem_operations (см. документацию по golos::protocol), иначе вышеупомянутая строчка op.visit(st_writer) не будет компилироваться.
В новых версиях появляются новые операции, это требует доработки mongo_db_state.cpp

visit посылает операцию в соответствующий оператор state_writerа.
В операторе state_writerа происходит
- создание bsoncxx::documentов (внутри named_documentов),
- извлечение информации из операции (поля, которые есть у каждой операции, следует смотреть в steem_operations), при необходимости - - также извлечение нужной информации из db (где db - это golos chain database),
- заполнение всем этим документа
- и добавление его в единый all_docs (на который передана ссылка в state_writer, см. выше)
Добавление происходит через bmi_insert_or_replace()
Сами операторы в актуальной версии ничего не возвращают, они только работают с all_docs.
Сами операторы не должны ничего записывать в Монго, ни создавать, ни удалять. Все через all_docs.

== golos/plugins/mongo_db/mongo_db_writer.cpp - After visit:

После выхода из state_writerовского оператора, работа продолжается опять в mongo_db_writer.cpp, теперь уже в следующих строчках после op.visit(st_writer).

Там происходят вызовы write_document() и remove_document(), которые добавляют bsoncxx::documentы из all_docs в bulk_write этой серии (содержащийся в formatted_blocks) - и, наконец, после формирования всего bulk_write будет вызов write_data(), который запишет этот bulk_write в Монго.

== golos/plugins/mongo_db/mongo_db_operations.cpp:

Содержит класс operation_writer, который сходен с state_writer - также использует паттерн Visitor и поэтому должен содержать операторы для всех операций, которые существуют в steem_operations (см. документацию по golos::protocol), иначе не будет компилироваться.
В новых версиях появляются новые операции, это требует доработки mongo_db_operations.cpp, также как и mongo_db_state.cpp

Однако operation_writer используется в другом месте - в write_raw_block(). И задача его иная - он записывает не сами объекты (как комментарии или голоса) в Монго, а мета-информацию об операции, которая пойдет в документ блока в коллекции blocks. 

write_raw_block также добавляет bsoncxx::documentы в bulk_write, как и write_document и remove_document.











