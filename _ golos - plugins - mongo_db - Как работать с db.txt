В любом из операторов стейта, где нужно создавать документы, у нас есть ссылка на операцию, но операция содержит далеко не все значения, которые нужно записать в документ, а только минимальные - например, author и permlink. Остальные нужно брать самим из db по значениям из операции.
Кроме того, в самой db структура такова, что каждый объект хранит минимум информации (как и положено в базах данных), и чтобы извлечь ее всю, нужны дополнительные вызовы к db.

СЛУЧАЙ 1: Извлечь объект из db по данным из операции.

См. в коде примеры с db_.get_comment.

СЛУЧАЙ 2: Извлечь объект из db по его id из db.

Пример: для примера рассмотрим задачу, которая стояла в format_comment(). Вот мы уже извлекли comment_object через db_.get_comment(), взяли все его поля и добавили. Но нужно также добавить 2 таких поля, как root_comment.author и root_comment.permlink (неважно, сделаем ли мы из них oid или запишем отдельно). Такое задание нам дали.
Мы идем и смотрим comment_object, он очевидно находится где-то в golos/libraries/chain, поиск по файлам показывает что это файл comment_object.hpp.
Но мы открываем и видим, что в нем есть только вот такое поле:
id_type root_comment;

Решение:
Если рассматривать db как реляционную базу данных, то id_type это ключ, он не содержит никаких полей root-коммента, но его можно и нужно использовать для получения root-коммента.
Для этого нужно сделать еще один "запрос" к db, использует метод database::get<T>, в данном случае так:

auto& root_comment = db_.get<comment_object, by_id>(comment.root_comment);

где:
comment_object - это тип того, что хотим получить
comment.root_comment - это тот самый id_type, мы его передаем как есть, без кастов
by_id - смотреть определение get и думать

Еще по случаю:
С author все более-менее ясно:
std::string(author)
и все стандартно.
А вот permlink хранится как "shared_string", этот тип представляет собой boost::interprocess::basic_string и широко используется в db, будучи унаследованным еще от chainbase.hpp, которая third-party.
С ним можно поступить так:
std::string(permlink.c_str())
Этот способ выведен с помощью чтения документации по boost::interprocess::basic_string в Google.




















